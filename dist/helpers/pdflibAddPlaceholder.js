"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pdf_lib_1 = require("pdf-lib");
const const_1 = require("./const");
const pdfkitReferenceMock_1 = require("./pdfkitReferenceMock");
const SignPdfError_1 = require("../SignPdfError");
const defaultOpts = {
    signatureLength: const_1.DEFAULT_SIGNATURE_LENGTH,
    byteRangePlaceholder: const_1.DEFAULT_BYTE_RANGE_PLACEHOLDER
};
async function pdflibAddPlaceholder(opts) {
    const { pdfBuffer, infoSignature, signatureLength, byteRangePlaceholder } = {
        ...defaultOpts, ...opts
    };
    let pdfDoc;
    try {
        pdfDoc = await pdf_lib_1.PDFDocument.load(pdfBuffer);
    }
    catch (err) {
        if (err.message.includes('encrypted')) {
            throw new SignPdfError_1.SignPdfError('Problem loading PDF, PDF encrypted', SignPdfError_1.ERROR_TYPE_PARSE);
        }
        else {
            throw err;
        }
    }
    const date = new Date();
    const arrayByteRange = pdf_lib_1.PDFArray.withContext(pdfDoc.context);
    arrayByteRange.push(pdf_lib_1.PDFNumber.of(0));
    arrayByteRange.push(pdf_lib_1.PDFName.of(byteRangePlaceholder));
    arrayByteRange.push(pdf_lib_1.PDFName.of(byteRangePlaceholder));
    arrayByteRange.push(pdf_lib_1.PDFName.of(byteRangePlaceholder));
    const signatureDictMap = new Map();
    signatureDictMap.set(pdf_lib_1.PDFName.Type, pdf_lib_1.PDFName.of('Sig'));
    signatureDictMap.set(pdf_lib_1.PDFName.of('Filter'), pdf_lib_1.PDFName.of('Adobe.PPKLite'));
    signatureDictMap.set(pdf_lib_1.PDFName.of('SubFilter'), pdf_lib_1.PDFName.of('adbe.pkcs7.detached'));
    signatureDictMap.set(pdf_lib_1.PDFName.of('ByteRange'), arrayByteRange);
    signatureDictMap.set(pdf_lib_1.PDFName.of('Contents'), pdf_lib_1.PDFHexString.fromText('0'.repeat(signatureLength)));
    signatureDictMap.set(pdf_lib_1.PDFName.of('Reason'), pdf_lib_1.PDFString.of(infoSignature.reason));
    signatureDictMap.set(pdf_lib_1.PDFName.of('M'), pdf_lib_1.PDFString.fromDate(date));
    signatureDictMap.set(pdf_lib_1.PDFName.of('ContactInfo'), pdf_lib_1.PDFString.of(infoSignature.contactInfo || ''));
    signatureDictMap.set(pdf_lib_1.PDFName.of('Name'), pdf_lib_1.PDFString.of(infoSignature.name || ''));
    signatureDictMap.set(pdf_lib_1.PDFName.of('Location'), pdf_lib_1.PDFString.of(infoSignature.location || ''));
    const signatureDict = pdf_lib_1.PDFDict.fromMapWithContext(signatureDictMap, pdfDoc.context);
    // Check if pdf already contains acroform field
    const acroFormPosition = pdfBuffer.lastIndexOf('/Type /AcroForm');
    const isAcroFormExists = acroFormPosition !== -1;
    let fieldIds = [];
    let acroFormId;
    if (isAcroFormExists) {
        const pdfSlice = pdfBuffer.slice(acroFormPosition - 12);
        const acroForm = pdfSlice.slice(0, pdfSlice.indexOf('endobj')).toString();
        const acroFormFirsRow = acroForm.split('\n')[0];
        acroFormId = parseInt(acroFormFirsRow.split(' ')[0]);
        const acroFormFields = acroForm.slice(acroForm.indexOf('/Fields [') + 9, acroForm.indexOf(']'));
        fieldIds = acroFormFields
            .split(' ')
            .filter((element, index) => index % 3 === 0)
            .map(fieldId => new pdfkitReferenceMock_1.PDFKitReferenceMock(fieldId));
    }
    const signatureName = 'Signature';
    const info = (infoSignature.name || 'Signed') + '\n' + date.toISOString();
    if (!infoSignature.positionBBox || !infoSignature.positionBBox.left ||
        !infoSignature.positionBBox.bottom || !infoSignature.positionBBox.right ||
        !infoSignature.positionBBox.top) {
        infoSignature.positionBBox = {
            left: 0,
            bottom: 0,
            right: 200,
            top: 50
        };
    }
    const sigAppearanceStreamMapDict = new Map();
    // const FontHelvetica = pdfDoc.embedStandardFont(StandardFonts.Helvetica)
    // const resourcesMap = new Map()
    // const fontMap = new Map()
    // fontMap.set(PDFName.of('Helvetica'), FontHelvetica)
    // resourcesMap.set(PDFName.Font, PDFDict.fromMapWithContext(fontMap, pdfDoc.context))
    // sigAppearanceStreamMapDict.set(
    //   PDFName.of('Resources'),
    //   PDFDict.fromMapWithContext(resourcesMap, pdfDoc.context)
    // )
    sigAppearanceStreamMapDict.set(pdf_lib_1.PDFName.Type, pdf_lib_1.PDFName.XObject);
    sigAppearanceStreamMapDict.set(pdf_lib_1.PDFName.of('Subtype'), pdf_lib_1.PDFName.of('Form'));
    // Define a content stream that defines how the signature field should appear
    // on the PDF. - Table 95 of the PDF specification.
    const sigAppearanceStream = pdf_lib_1.PDFContentStream.of(pdf_lib_1.PDFDict.fromMapWithContext(sigAppearanceStreamMapDict, pdfDoc.context), pdf_lib_1.drawRectangle({
        x: pdf_lib_1.PDFNumber.of(infoSignature.positionBBox.left),
        y: pdf_lib_1.PDFNumber.of(infoSignature.positionBBox.bottom),
        width: pdf_lib_1.PDFNumber.of(infoSignature.positionBBox.right),
        height: pdf_lib_1.PDFNumber.of(infoSignature.positionBBox.top),
        color: pdf_lib_1.rgb(0.95, 0.95, 0.95),
        borderWidth: 3,
        borderColor: pdf_lib_1.rgb(0, 0, 0),
        rotate: pdf_lib_1.degrees(0),
        xSkew: pdf_lib_1.degrees(0),
        ySkew: pdf_lib_1.degrees(0)
    }));
    pdf_lib_1.drawText(pdf_lib_1.PDFHexString.of(info), {
        x: pdf_lib_1.PDFNumber.of(10),
        y: pdf_lib_1.PDFNumber.of(15),
        font: 'Helvetica',
        size: pdf_lib_1.PDFNumber.of(15),
        color: pdf_lib_1.rgb(0.5, 0.5, 0.5),
        rotate: pdf_lib_1.degrees(0),
        xSkew: pdf_lib_1.degrees(0),
        ySkew: pdf_lib_1.degrees(0)
    }).forEach(x => { sigAppearanceStream.push(x); });
    pdf_lib_1.drawRectangle({
        x: pdf_lib_1.PDFNumber.of(4),
        y: pdf_lib_1.PDFNumber.of(4),
        width: pdf_lib_1.PDFNumber.of(192),
        height: pdf_lib_1.PDFNumber.of(2),
        color: pdf_lib_1.rgb(0.5, 0.5, 0.5),
        rotate: pdf_lib_1.degrees(0),
        borderWidth: 0,
        borderColor: pdf_lib_1.rgb(0, 0, 0),
        xSkew: pdf_lib_1.degrees(0),
        ySkew: pdf_lib_1.degrees(0)
    }).forEach(x => { sigAppearanceStream.push(x); });
    const sigAppearanceStreamRef = pdfDoc.context.register(sigAppearanceStream);
    // Define the signature widget annotation - Table 164
    const widgetDictMap = new Map();
    const APMap = new Map();
    const arrayRect = pdf_lib_1.PDFArray.withContext(pdfDoc.context);
    arrayRect.push(pdf_lib_1.PDFNumber.of(50));
    arrayRect.push(pdf_lib_1.PDFNumber.of(50));
    arrayRect.push(pdf_lib_1.PDFNumber.of(300));
    arrayRect.push(pdf_lib_1.PDFNumber.of(100));
    APMap.set(pdf_lib_1.PDFName.of('N'), sigAppearanceStreamRef);
    widgetDictMap.set(pdf_lib_1.PDFName.Type, pdf_lib_1.PDFName.of('Annot'));
    widgetDictMap.set(pdf_lib_1.PDFName.of('Subtype'), pdf_lib_1.PDFName.of('Widget'));
    widgetDictMap.set(pdf_lib_1.PDFName.of('FT'), pdf_lib_1.PDFName.of('Sig'));
    widgetDictMap.set(pdf_lib_1.PDFName.of('Rect'), arrayRect);
    widgetDictMap.set(pdf_lib_1.PDFName.of('V'), signatureDict);
    widgetDictMap.set(pdf_lib_1.PDFName.of('T'), pdf_lib_1.PDFString.of(signatureName + (fieldIds.length + 1)));
    widgetDictMap.set(pdf_lib_1.PDFName.of('F'), pdf_lib_1.PDFNumber.of(4));
    widgetDictMap.set(pdf_lib_1.PDFName.of('P'), pdfDoc.catalog.Pages().Kids().get(0));
    widgetDictMap.set(pdf_lib_1.PDFName.of('AP'), pdf_lib_1.PDFDict.fromMapWithContext(APMap, pdfDoc.context));
    const widgetDict = pdf_lib_1.PDFDict.fromMapWithContext(widgetDictMap, pdfDoc.context);
    const widgetDictRef = pdfDoc.context.register(widgetDict);
    // Add our signature widget to the first page
    // by parameter it should also be sent which pages you want to sign - ojo
    const pages = pdfDoc.getPages();
    const arrayAnnots = pdf_lib_1.PDFArray.withContext(pdfDoc.context);
    arrayAnnots.push(widgetDictRef);
    pages[0].node.set(pdf_lib_1.PDFName.Annots, arrayAnnots);
    // Create an AcroForm object containing our signature widget
    const formDictMap = new Map();
    const arrayFields = pdf_lib_1.PDFArray.withContext(pdfDoc.context);
    arrayFields.push(widgetDictRef);
    formDictMap.set(pdf_lib_1.PDFName.of('SigFlags'), pdf_lib_1.PDFNumber.of(3));
    formDictMap.set(pdf_lib_1.PDFName.of('Fields'), arrayFields);
    const formDict = pdf_lib_1.PDFDict.fromMapWithContext(formDictMap, pdfDoc.context);
    pdfDoc.catalog.set(pdf_lib_1.PDFName.of('AcroForm'), formDict);
    let pdfDocBytes = await pdf_lib_1.PDFWriter.forContext(pdfDoc.context, 1).serializeToBuffer();
    // Delete spaces in ByteRange
    pdfDocBytes = Buffer.from(pdfDocBytes);
    const byteRangePlaceholderContent = [
        0,
        `/${byteRangePlaceholder}`,
        `/${byteRangePlaceholder}`,
        `/${byteRangePlaceholder}`
    ];
    const byteRangeString = `/ByteRange [ ${byteRangePlaceholderContent.join(' ')} ]`;
    let actualByteRange = `/ByteRange [${byteRangePlaceholderContent.join(' ')}]`;
    actualByteRange += '  ';
    const byteRangePos = pdfDocBytes.indexOf(byteRangeString);
    if (byteRangePos !== -1) {
        const byteRangeEnd = byteRangePos + byteRangeString.length;
        pdfDocBytes = Buffer.concat([
            pdfDocBytes.slice(0, byteRangePos),
            Buffer.from(actualByteRange),
            pdfDocBytes.slice(byteRangeEnd),
        ]);
    }
    return Buffer.from(pdfDocBytes);
}
exports.pdflibAddPlaceholder = pdflibAddPlaceholder;
//# sourceMappingURL=data:application/json;base64,